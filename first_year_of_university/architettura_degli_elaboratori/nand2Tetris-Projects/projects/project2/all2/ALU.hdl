// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not (in = x[0], out = notX0);
	Or (a = notX0, b = x[0], out = true);		// valore 1
	Not (in = true, out = false);				// valore 0
	And16 (a = x, b = false, out = false16);	// valore 0x16
	Not16 (in = false16, out = true16);			// valore 1x16
	
	//zx
	//And (a = true, b = zx, out = Bzx);
	Mux16 (a = x, b = false16, sel = zx, out = ZX1);
	
	//nx
	//And (a = true, b = nx, out = Bnx);
	Not16 (in = ZX1, out = notZX16);
	Mux16 (a = ZX1, b = notZX16, sel = nx, out = Xend);
	
	//zy
	//And (a = true, b = zy, out = Bzy);
	Mux16 (a = y, b = false16, sel = zy, out = ZY1);
	
	//ny
	//And (a = true, b = ny, out = Bny);
	Not16 (in = ZY1, out = notZY16);
	Mux16 (a = ZY1, b = notZY16, sel = ny, out = Yend);
	
	//f
	//And (a = true, b = f, out = Bf);
	Or16 (a = Xend, b = Yend, out = X16orY16);
	And16 (a = Xend, b = Yend, out = X16andY16);
	Mux16 (a = X16andY16, b = X16orY16, sel = f, out = PRERES);
	
	//no
	//And (a = true, b = no, out = Bno);
	Not16 (in = PRERES, out = notOUT);
	Mux16 (a = PRERES, b = notOUT, sel = no, out = RES);
	Not16 (in = RES, out = aaa);
	Not16 (in = aaa, out = out);
	
	
	
	//ng
	//Mux (a = false, b = true, sel = RES[0], out = ng);
	Or (a = true, b = true, out = ng);
	
	//zr
	//Or16 (a = false, b = RES, out = )
	
	
	
	
	
}